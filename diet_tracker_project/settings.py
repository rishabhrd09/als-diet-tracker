# diet_tracker_project/settings.py

"""
Django settings for diet_tracker_project project.

Generated by 'django-admin startproject' using Django 5.0.4. 
(Adjust Django version comment if needed)

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url         # To parse DATABASE_URL environment variable
from dotenv import load_dotenv # To load .env file for local development

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Environment Variable Loading ---
# Load environment variables from .env file if it exists (mainly for local development)
# Looks for .env in the parent directory of this settings file (i.e., the project root)
dotenv_path = BASE_DIR / '.env'
load_dotenv(dotenv_path=dotenv_path)

# --- Core Security Settings ---

# SECURITY WARNING: keep the secret key used in production secret!
# Read SECRET_KEY from environment variable.
# Provide a fallback *only* for local development convenience if .env is missing.
# THIS FALLBACK VALUE SHOULD NOT BE YOUR PRODUCTION KEY.
SECRET_KEY = os.environ.get(
    'SECRET_KEY',
    'django-insecure-fallback-key-for-dev-needs-replacement-in-env'
)

# SECURITY WARNING: don't run with debug turned on in production!
# Read DEBUG status from environment variable (treat 'True'/'true'/'1' as True).
# Defaults to True for local development if not set in .env or environment.
DEBUG = os.environ.get('DEBUG', 'True').lower() in ['true', '1']

# Define allowed hosts for the application.
# Read from environment variable (comma-separated string).
# Defaults to localhost/127.0.0.1 for local development.
allowed_hosts_str = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost')
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',') if host.strip()]


# --- Application Definition ---

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic', # Add this to use WhiteNoise with runserver efficiently
    'django.contrib.staticfiles',
    # Third-party apps
    'rest_framework',
    'corsheaders',
    # Your apps
    'diet_api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise Middleware should be placed directly after SecurityMiddleware
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # CORS Middleware needs to be placed high up, before CommonMiddleware
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'diet_tracker_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'diet_tracker_project.wsgi.application'


# --- Database ---
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Default to SQLite for local development if DATABASE_URL is not set
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Read DATABASE_URL environment variable (set by Render or in local .env)
DATABASE_URL = os.environ.get('DATABASE_URL')
if DATABASE_URL:
    # Override default database settings using the DATABASE_URL
    DATABASES['default'] = dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=600,          # Optional: Number of seconds database connections should persist
        conn_health_checks=True,   # Optional: Enables health checks on connections
    )


# --- Password Validation ---
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# --- Internationalization ---
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC' # Or set to your specific timezone, e.g., 'Asia/Kolkata'
USE_I18N = True
USE_TZ = True # Recommended to keep True for timezone handling


# --- Static files (CSS, JavaScript, Images) ---
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
# Directory where `collectstatic` will gather static files for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Recommended storage backend for WhiteNoise (handles compression and caching)
STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# --- Media files (User Uploads) ---

MEDIA_URL = '/media/'
# Directory where user-uploaded files will be stored
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# --- CORS (Cross-Origin Resource Sharing) Settings ---

# Read allowed origins from environment variable (comma-separated string)
# Defaults to typical React development ports if not set.
cors_origins_str = os.environ.get('CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000')
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in cors_origins_str.split(',') if origin.strip()]

# It's generally safer to explicitly list origins than allow all
CORS_ALLOW_ALL_ORIGINS = False

# If your frontend and backend are on different domains in production,
# you might need to allow credentials (cookies, auth headers) if using session auth
# CORS_ALLOW_CREDENTIALS = True


# --- CSRF (Cross-Site Request Forgery) Settings ---

# Read trusted origins for CSRF from environment variable (comma-separated string)
# Needed when frontend is on a different domain/port than the backend
csrf_trusted_origins_str = os.environ.get('CSRF_TRUSTED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000')
CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in csrf_trusted_origins_str.split(',') if origin.strip()]

# For session-based authentication, ensure cookies are sent correctly
# SESSION_COOKIE_SECURE = not DEBUG # Send session cookie only over HTTPS in production
# CSRF_COOKIE_SECURE = not DEBUG # Send CSRF cookie only over HTTPS in production
# SESSION_COOKIE_SAMESITE = 'Lax' # Or 'Strict' or 'None' (if needed with HTTPS for cross-site requests)
# CSRF_COOKIE_SAMESITE = 'Lax'

# --- Default primary key field type ---
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'